/*
 * Copyright (c) 2020 ETH Zurich
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Simon               2020
 */

#include <map>
#include <iostream>
#include <fstream>
#include <string>
#include <ctime>
#include <iostream>
#include <fstream>
#include <sys/stat.h>
#include <dirent.h>
#include <unistd.h>
#include <chrono>
#include <stdexcept>

#include "ns3/basic-simulation.h"
#include "ns3/tcp-flow-scheduler.h"
#include "ns3/udp-burst-scheduler.h"
#include "ns3/pingmesh-scheduler.h"
#include "ns3/topology-satellite-network.h"
#include "ns3/tcp-optimizer.h"
#include "ns3/arbiter-single-forward-helper.h"
#include "ns3/arbiter-deflection-helper.h"
#include "ns3/arbiter-gs-priority-deflection-helper.h"
#include "ns3/ipv4-arbiter-routing-helper.h"
#include "ns3/gsl-if-bandwidth-helper.h"
#include "ns3/packet-loss-counter.h"


#include "ns3/flow-monitor-helper.h"
#include "ns3/flow-monitor.h"


#include "ns3/packet.h"
#include "ns3/ipv4-header.h"
#include "ns3/ipv6-header.h"
#include "ns3/tcp-header.h"
#include "ns3/udp-header.h"
#include "ns3/point-to-point-net-device.h"
#include "ns3/ethernet-header.h"


#include "ns3/packet.h"

int main(int argc, char *argv[]) {
    // No buffering of printf
    setbuf(stdout, nullptr);
    
    // Retrieve run directory
    CommandLine cmd;
    std::string run_dir = "";
    cmd.Usage("Usage: ./waf --run=\"main_satnet --run_dir='<path/to/run/directory>'\"");
    cmd.AddValue("run_dir",  "Run directory", run_dir);
    cmd.Parse(argc, argv);
    if (run_dir.compare("") == 0) {
        printf("Usage: ./waf --run=\"main_satnet --run_dir='<path/to/run/directory>'\"");
        return 0;
    }
    
    // Load basic simulation environment
    Ptr<BasicSimulation> basicSimulation = CreateObject<BasicSimulation>(run_dir);
    
    // Setting socket type
    Config::SetDefault ("ns3::TcpL4Protocol::SocketType", StringValue ("ns3::" + basicSimulation->GetConfigParamOrFail("tcp_socket_type")));
    
    // Optimize TCP
    TcpOptimizer::OptimizeBasic(basicSimulation);
    
    // Read topology, and install routing arbiters
    Ptr<TopologySatelliteNetwork> topology = CreateObject<TopologySatelliteNetwork>(basicSimulation, Ipv4ArbiterRoutingHelper());
    
    ArbiterGSPriorityDeflectionHelper arbiterHelper(basicSimulation, topology->GetNodes());
    GslIfBandwidthHelper gslIfBandwidthHelper(basicSimulation, topology->GetNodes());
    
    // Schedule flows
    TcpFlowScheduler tcpFlowScheduler(basicSimulation, topology);
    
    // Schedule UDP bursts
    UdpBurstScheduler udpBurstScheduler(basicSimulation, topology);
    
    // Schedule pings
    PingmeshScheduler pingmeshScheduler(basicSimulation, topology);
    
    std::srand(std::time(nullptr));
    
    // Run simulation
    basicSimulation->Run();
    
    // Write flow results
    tcpFlowScheduler.WriteResults();
    
    // Write UDP burst results
    udpBurstScheduler.WriteResults();
    
    // Write pingmesh results
    pingmeshScheduler.WriteResults();
    
    // Collect utilization statistics
    topology->CollectUtilizationStatistics();
    
    printf("\n\nLOGGING RESULTS\n\n");

    auto schedule = tcpFlowScheduler.GetResults();
    auto apps = tcpFlowScheduler.GetApps();

    uint32_t app_idx = 0;
    for (auto flow : schedule) {
        Ptr<TcpFlowSendApplication> flowSendApp = apps.at(app_idx++).Get(0)->GetObject<TcpFlowSendApplication>();
        
        int64_t sent_bytes = flowSendApp->GetAckedBytes();
        double sent_mbit = (sent_bytes * 8.0) / 1000000;

        auto from_id = flow.GetFromNodeId();
        auto to_id = flow.GetFromNodeId();
        auto add = flow.GetAdditionalParameters();
        auto start_time = flow.GetStartTimeNs();
        auto meta = flow.GetMetadata();

        auto to_node = topology->GetNodes().Get(to_id);

        auto arbiters = arbiterHelper.GetArbiters();
        auto to_arbiter = arbiters[to_id];



        std::cout << "FLOW: " << flow.GetTcpFlowId() << " " << from_id << " -> " << to_id << "\t Size actual (mbit): " << sent_mbit <<  "\tSTART TIME: " << start_time <<  std::endl;
        
    }
    printf("Done\n\n");

    // Finalize the simulation
    basicSimulation->Finalize();

    
    
    
    return 0;
}