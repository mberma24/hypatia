/*
 * Copyright (c) 2020 ETH Zurich
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Simon               2020
 */

#include <map>
#include <iostream>
#include <fstream>
#include <string>
#include <ctime>
#include <iostream>
#include <fstream>
#include <sys/stat.h>
#include <dirent.h>
#include <unistd.h>
#include <chrono>
#include <stdexcept>
#include <set>

#include "ns3/basic-simulation.h"
#include "ns3/tcp-flow-scheduler.h"
#include "ns3/udp-burst-scheduler.h"
#include "ns3/pingmesh-scheduler.h"
#include "ns3/topology-satellite-network.h"
#include "ns3/tcp-optimizer.h"
#include "ns3/arbiter-single-forward-helper.h"
#include "ns3/arbiter-deflection-helper.h"
#include "ns3/arbiter-gs-priority-deflection-helper.h"
#include "ns3/ipv4-arbiter-routing-helper.h"
#include "ns3/gsl-if-bandwidth-helper.h"
#include "ns3/packet-loss-counter.h"

#include "ns3/flow-monitor-helper.h"
#include "ns3/flow-monitor.h"

#include "ns3/packet.h"
#include "ns3/ipv4-header.h"
#include "ns3/ipv6-header.h"
#include "ns3/tcp-header.h"
#include "ns3/udp-header.h"
#include "ns3/point-to-point-net-device.h"
#include "ns3/ethernet-header.h"
#include "ns3/packet-sink.h"
#include "ns3/socket.h"
#include "ns3/tcp-socket-base.h"

using namespace ns3;

// Forward declarations
void CheckForNewApplications(Ptr<TopologySatelliteNetwork> topology);
void TrySocketLevelTracing(Ptr<TopologySatelliteNetwork> topology);

// Global variables to track statistics
std::map<int, uint64_t> full;
std::map<int, uint64_t> pay;

// Trace callback for applications
void AppRxTrace(int nodeId, Ptr<const Packet> packet, const Address& from) {
    uint32_t packetSize = packet->GetSize();
    
    pay[nodeId] += packetSize;
    full[nodeId] += packetSize;
    
    std::cout << "Node " << nodeId << " received " << packetSize 
              << " bytes at time " << Simulator::Now().GetSeconds() << "s" << std::endl;
}

// Socket-level receive callback
void SocketRxTrace(std::string context, Ptr<const Packet> packet, const Address &from) {
    // Extract node ID from context
    size_t nodeListPos = context.find("/NodeList/");
    if (nodeListPos == std::string::npos) return;
    
    size_t nodeIdStart = nodeListPos + 10;
    size_t nodeIdEnd = context.find("/", nodeIdStart);
    if (nodeIdEnd == std::string::npos) return;
    
    int nodeId = std::stoi(context.substr(nodeIdStart, nodeIdEnd - nodeIdStart));
    
    uint32_t packetSize = packet->GetSize();
    
    if (packetSize > 0) {
        pay[nodeId] += packetSize;
        full[nodeId] += packetSize;
        
        std::cout << "Node " << nodeId << " socket received " << packetSize 
                  << " bytes at time " << Simulator::Now().GetSeconds() << "s" << std::endl;
    }
}

void CheckForNewApplications(Ptr<TopologySatelliteNetwork> topology) {
    static std::set<std::pair<int, int>> tracedApps;
    static bool socketTracingAttempted = false;
    static int checkCount = 0;
    checkCount++;
    
    NodeContainer allNodes = topology->GetNodes();
    int totalApps = 0;
    int totalReceiveApps = 0;
    int newTraces = 0;
    std::map<std::string, int> appTypes;
    
    for (uint32_t i = 0; i < allNodes.GetN(); ++i) {
        // Focus on ground stations for receiving applications
        if (!topology->IsGroundStationId(i)) {
            continue;
        }
        
        Ptr<Node> node = allNodes.Get(i);
        totalApps += node->GetNApplications();
        
        for (uint32_t j = 0; j < node->GetNApplications(); ++j) {
            std::pair<int, int> appKey = std::make_pair(i, j);
            Ptr<Application> app = node->GetApplication(j);
            
            std::string typeName = app->GetTypeId().GetName();
            std::string instanceName = app->GetInstanceTypeId().GetName();
            appTypes[instanceName]++;
            
            if (tracedApps.find(appKey) == tracedApps.end()) {
                // Try standard PacketSink first
                Ptr<PacketSink> packetSink = DynamicCast<PacketSink>(app);
                
                if (packetSink) {
                    totalReceiveApps++;
                    packetSink->TraceConnectWithoutContext("Rx", 
                        MakeBoundCallback(&AppRxTrace, (int)i));
                    
                    tracedApps.insert(appKey);
                    newTraces++;
                    std::cout << "Traced PacketSink on node " << i << std::endl;
                }
                else if (instanceName == "ns3::TcpFlowSink") {
                    totalReceiveApps++;
                    tracedApps.insert(appKey);
                    
                    // For TcpFlowSink, try multiple trace connection strategies
                    TypeId typeId = app->GetInstanceTypeId();
                    bool traceConnected = false;
                    
                    // List all available trace sources first
                    if (checkCount <= 10) { // Only do this early in the simulation
                        std::cout << "TcpFlowSink on node " << i << " available traces:" << std::endl;
                        for (uint32_t k = 0; k < typeId.GetTraceSourceN(); ++k) {
                            TypeId::TraceSourceInformation traceInfo = typeId.GetTraceSource(k);
                            std::cout << "  - " << traceInfo.name << " (" << traceInfo.help << ")" << std::endl;
                        }
                    }
                    
                    // Strategy 1: Try common trace source names with error handling
                    std::vector<std::string> possibleTraces = {
                        "Rx", "RxPacket", "DataReceived", "PacketReceived", 
                        "SocketRx", "AppRx", "Receive", "ReceivedPacket",
                        "RxWithAddresses", "PacketSink"
                    };
                    
                    for (const std::string& traceName : possibleTraces) {
                        for (uint32_t k = 0; k < typeId.GetTraceSourceN(); ++k) {
                            TypeId::TraceSourceInformation traceInfo = typeId.GetTraceSource(k);
                            if (traceInfo.name == traceName) {
                                try {
                                    // Use TraceConnect instead of TraceConnectWithoutContext for better compatibility
                                    std::ostringstream oss;
                                    oss << "/NodeList/" << i << "/ApplicationList/" << j << "/" << traceName;
                                    Config::Connect(oss.str(), MakeCallback(&SocketRxTrace));
                                    
                                    traceConnected = true;
                                    newTraces++;
                                    std::cout << "Traced TcpFlowSink on node " << i 
                                              << " using '" << traceName << "' via Config::Connect" << std::endl;
                                    break;
                                } catch (...) {
                                    // Try the direct approach as fallback
                                    try {
                                        app->TraceConnectWithoutContext(traceName, 
                                            MakeBoundCallback(&AppRxTrace, (int)i));
                                        traceConnected = true;
                                        newTraces++;
                                        std::cout << "Traced TcpFlowSink on node " << i 
                                                  << " using '" << traceName << "' direct" << std::endl;
                                        break;
                                    } catch (...) {
                                        continue; // Try next trace source
                                    }
                                }
                            }
                        }
                        if (traceConnected) break;
                    }
                    
                    if (!traceConnected) {
                        std::cout << "Could not connect to any trace source for TcpFlowSink on node " << i << std::endl;
                    }
                }
            }
        }
    }
    
    // Try one-time socket level tracing setup after applications are found
    if (!socketTracingAttempted && totalReceiveApps > 0) {
        socketTracingAttempted = true;
        std::cout << "Attempting safe socket-level tracing setup..." << std::endl;
        
        // Try to set up socket-level tracing safely
        try {
            // Only try this if we know there are TCP sockets
            Config::Connect("/NodeList/*/DeviceList/*/$ns3::PointToPointNetDevice/MacRx", 
                            MakeCallback(&SocketRxTrace));
            std::cout << "Connected to device-level packet reception" << std::endl;
        } catch (...) {
            // Ignore errors in socket-level setup
        }
    }
    
    // Print summary periodically
    if (checkCount % 100 == 0 || newTraces > 0) {
        std::cout << "Check #" << checkCount << " at " << Simulator::Now().GetSeconds() 
                  << "s: " << totalApps << " apps, " << totalReceiveApps 
                  << " receive apps, " << tracedApps.size() << " traced (" << newTraces << " new)" << std::endl;
        
        if (checkCount % 200 == 0) {
            for (const auto& pair : appTypes) {
                std::cout << "  " << pair.first << ": " << pair.second << std::endl;
            }
        }
    }
    
    // Schedule next check
    if (Simulator::Now() < Seconds(1.0)) {
        Simulator::Schedule(Seconds(0.01), &CheckForNewApplications, topology);
    } else if (Simulator::Now() < Seconds(5.0)) {
        Simulator::Schedule(Seconds(0.1), &CheckForNewApplications, topology);
    } else {
        Simulator::Schedule(Seconds(2.0), &CheckForNewApplications, topology);
    }
}

// Try socket-level tracing as fallback
void TrySocketLevelTracing(Ptr<TopologySatelliteNetwork> topology) {
    std::cout << "Socket-level tracing setup (will be done during application scanning)..." << std::endl;
    
    // We'll handle socket-level tracing in the application scanning function
    // to avoid connecting to non-existent trace sources that crash the program
}

// Main function
int main(int argc, char *argv[]) {
    // No buffering of printf
    setbuf(stdout, nullptr);
    
    // Retrieve run directory
    CommandLine cmd;
    std::string run_dir = "";
    cmd.Usage("Usage: ./waf --run=\"main_satnet --run_dir='<path/to/run/directory>'\"");
    cmd.AddValue("run_dir",  "Run directory", run_dir);
    cmd.Parse(argc, argv);
    if (run_dir.compare("") == 0) {
        printf("Usage: ./waf --run=\"main_satnet --run_dir='<path/to/run/directory>'\"");
        return 0;
    }
    
    // Load basic simulation environment
    Ptr<BasicSimulation> basicSimulation = CreateObject<BasicSimulation>(run_dir);
    
    // Setting socket type
    Config::SetDefault ("ns3::TcpL4Protocol::SocketType", StringValue ("ns3::" + basicSimulation->GetConfigParamOrFail("tcp_socket_type")));
    
    // Optimize TCP
    TcpOptimizer::OptimizeBasic(basicSimulation);
    
    // Read topology, and install routing arbiters
    Ptr<TopologySatelliteNetwork> topology = CreateObject<TopologySatelliteNetwork>(basicSimulation, Ipv4ArbiterRoutingHelper());
    
    ArbiterGSPriorityDeflectionHelper arbiterHelper(basicSimulation, topology->GetNodes());
    GslIfBandwidthHelper gslIfBandwidthHelper(basicSimulation, topology->GetNodes());
    
    // Schedule flows
    TcpFlowScheduler tcpFlowScheduler(basicSimulation, topology);
    
    // Schedule UDP bursts
    UdpBurstScheduler udpBurstScheduler(basicSimulation, topology);
    
    // Schedule pings
    PingmeshScheduler pingmeshScheduler(basicSimulation, topology);
    
    std::srand(std::time(nullptr));
    
    // Set up both application-level and socket-level tracing
    std::cout << "Setting up multi-level packet reception tracing..." << std::endl;
    
    // Strategy 1: Periodic application scanning
    Simulator::Schedule(Seconds(0.01), &CheckForNewApplications, topology);
    
    // Strategy 2: Socket-level tracing (may catch what app-level misses)
    TrySocketLevelTracing(topology);
    
    // Run simulation
    basicSimulation->Run();
    
    // Write flow results
    tcpFlowScheduler.WriteResults();
    
    // Write UDP burst results
    udpBurstScheduler.WriteResults();
    
    // Write pingmesh results
    pingmeshScheduler.WriteResults();
    
    // Collect utilization statistics
    topology->CollectUtilizationStatistics();
    
    // Finalize the simulation
    basicSimulation->Finalize();
    
    printf("\n\nLOGGING RESULTS\n");
    std::cout << "FULL (Application Layer Received)\n";
    for (auto it = full.begin(); it != full.end(); it++) {
        std::cout << "Node " << it->first << ": " << double(it->second) * 8 / 1000000 << " Mbit\n";
    }
    std::cout << "\nPAYLOAD (Application Layer Received)\n";
    for (auto it = pay.begin(); it != pay.end(); it++) {
        std::cout << "Node " << it->first << ": " << double(it->second) * 8 / 1000000 << " Mbit\n";
    }
    
    return 0;
}